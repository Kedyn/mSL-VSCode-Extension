{
  "scopeName": "source.mslc",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#group"
    },
    {
      "include": "#alias"
    },
    {
      "include": "#menu"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "include": "#comment_documentation"
        },
        {
          "include": "#comment_block"
        },
        {
          "include": "#comment_line"
        }
      ]
    },
    "comment_documentation": {
      "patterns": [
        {
          "comment": "Matches a documentation multi-line comment block.",
          "name": "comment.block.documentation.msl",
          "begin": "^(?:\\x20*)(\\/\\*\\*)$",
          "end": "^(?:\\x20*)\\*\\/$",
          "patterns": [
            {
              "include": "#documentation_block"
            }
          ]
        }
      ]
    },
    "documentation_block": {
      "patterns": [
        {
          "comment": "Matches tags for SimpleDocumentation v1.0.0.",
          "match": "(?i)\\x20*\\*\\x20+(@(?:author|command|const(?:ant)?|copyright|deprecated|event|example|experimental|global|identifier|ignore|license|nobadges|param(?:eter)?|arg(?:ument)?|prop|returns?|see|switch|todo|version))\\b",
          "captures": {
            "1": {
              "name": "storage.type.class.msl"
            }
          }
        }
      ]
    },
    "comment_block": {
      "patterns": [
        {
          "comment": "Matches a regular multi-line comment block.",
          "name": "comment.block.msl",
          "begin": "^(?:\\x20*)\\/\\*",
          "end": "^(?:\\x20*)\\*\\/$"
        }
      ]
    },
    "comment_line": {
      "patterns": [
        {
          "comment": "Matches a single line comment.",
          "name": "comment.line.semicolon.msl",
          "begin": "(?<=(?:\\G|\\x20\\|\\x20|^))(?:\\x20*);",
          "end": "(?=\\z|\\x20+\\|\\x20+[^\\s]|\\x20}|$)"
        }
      ]
    },
    "group": {
      "patterns": [
        {
          "comment": "Matches a group.",
          "name": "keyword.other.groupname.msl",
          "match": "(?i)^#[^\\s]+ (on|off|end)(?:\\b)"
        }
      ]
    },
    "alias": {
      "patterns": [
        {
          "comment": "Matches alias declaration.",
          "name": "meta.alias.code.msl",
          "begin": "(?i)^(alias)\\x20+(?:(-l)\\x20+)?(?!-l)([^\\s]+)\\s*",
          "beginCaptures": {
            "1": {
              "name": "storage.type.alias.msl"
            },
            "2": {
              "name": "storage.modifier.alias.msl"
            },
            "3": {
              "name": "entity.name.function.msl"
            }
          },
          "end": "(?i)(?=\\z|(?:^(?:on|raw|ctcp|dialog|\\#[^\\s]+|alias|menu)\\b))|(?<=}$)",
          "patterns": [
            {
              "include": "#code_content"
            }
          ]
        }
      ]
    },
    "code_content": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#identifiers"
        },
        {
          "include": "#conditionals"
        },
        {
          "include": "#commands"
        },
        {
          "include": "#code_block"
        }
      ]
    },
    "code_block": {
      "patterns": [
        {
          "name": "meta.code.block.msl",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "include": "#code_content"
            }
          ]
        }
      ]
    },
    "conditionals": {
      "patterns": [
        {
          "comment": "Matches conditionals: if elseif while",
          "name": "meta.conditional.msl",
          "begin": "(?i)(?:(?<=\\G|\\x20\\|\\x20|^)\\x20*(if|elseif|while)|(?:(?<=\\))\\x20+([&\\|x]{2})))\\x20+(?=\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.conditional.msl"
            },
            "2": {
              "name": "keyword.control.conditional.msl"
            }
          },
          "end": "(?=\\)(?:\\x20|$))",
          "patterns": [
            {
              "include": "#parameters"
            }
          ]
        },
        {
          "comment": "Matches conditional: else",
          "name": "keyword.control.conditional.msl",
          "begin": "(?i)(?<=\\x20\\|\\x20|^)\\x20*(else)\\b(?=\\x20)",
          "end": "(?=\\z|$)",
          "patterns": [
            {
              "include": "#parameters"
            }
          ]
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "Matches regular variables, %variable",
          "name": "variable.other.normal.msl",
          "match": "(?<![^(,\\x20])(%)[^\\x20),]+"
        },
        {
          "comment": "Matches binary variables, &variable",
          "name": "variable.other.binary.msl",
          "match": "(?<![^(,\\x20])(&)[^\\x20),]+"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "include": "#variables"
        },
        {
          "include": "#identifiers"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "include": "#identifiers_params"
        },
        {
          "include": "#identifiers_no_params"
        }
      ]
    },
    "identifiers_params": {
      "comment": "Matches identifiers that take parameters.",
      "patterns": [
        {
          "comment": "Identifiers with no props: $+() $abook $abs $acos $cos $date $address $addtok $addtokcs $agent $alias $and $ansi2mirc $aop $asc $asctime $asin $sin atan tan avoice",
          "begin": "(\\$\\$?~?(\\+|abook|a?cos|abs|date|add(ress|tok(cs)?)|agent|alias|and|ansi2mirc|aop|asc(time)?|a?sin|a?tan|avoice))\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.identifier.msl"
            }
          },
          "end": "(?i)\\)(?:\\.([^\\s|\\)|,]+))?",
          "endCaptures": {
            "1": {
              "name": "keyword.other.identifierproperty.msl"
            }
          },
          "patterns": [
            {
              "include": "#parameters"
            }
          ]
        }
      ]
    },
    "identifiers_no_params": {
      "comment": "Matches identifiers that do not take parameters.",
      "patterns": [
        {
          "comment": "Identifiers: $0 $! $* $+ $N-N $active $activecid $activewid $adate $date $address $agentname $agentstat $agentver $anick $aop $appactive $appstate $asctime $auto $avoice $away $awaymsg $awaytime",
          "name": "keyword.other.identifier.msl",
          "match": "\\$\\$?~?(0|\\!|&(?=$)|\\*|\\+\\+?|[1-9]+(-?([0-9]+)|[^\\s|\\)|,]+)?|active((c|w)id)?|a?date|address|agent(name|stat|ver)|anick|aop|app(active|state)|asctime|auto|avoice|away(msg|time)?)(?=\\s|\\)|,)"
        },
        {
          "comment": "Identifiers: $?",
          "match": "(\\$\\$?~?\\?(?:[^\\s=]+)?)(?:(=)(\"(?:[^\"])*\"))?(?=\\s|\\)|,)",
          "captures": {
            "1": {
              "name": "keyword.other.identifier.msl"
            },
            "2": {
              "name": "keyword.operator.msl"
            },
            "3": {
              "name": "string.quoted.double.msl"
            }
          }
        }
      ]
    },
    "commands": {
      "patterns": [
        {
          "comment": "Matches commands: /help /winhelp /server /disconnect /join /hop /part /partall /quit /list /links /quote /raw /me /msg /action /privmsg /notice /describe /amsg /ame /query /qme /qmsg /onotice /omsg /vnotice /vmsg /sound /ctcp /dcc /wallchops /wallvoices /uwho /sockaccept /sockclose /socklist /socklisten /sockmark /sockopen /sockpause /sockread /sockrename /sockudp /sockwrite /bread /breplace /bcopy /bset /btrunc /bunset /bwrite /comclose /comlist /comopen /comreg /dialog /did /didtok  /drawcopy /drawdot /drawfill /drawline /drawpic /drawrect /drawreplace /drawrot /drawsave /drawscroll /drawsize /drawtext /fopen /flist /fseek /fwrite /fclose  /aline /cline /dline /iline /rline /sline /clear /clearall /window /ghide /gload /gmove /gopts /gplay /gpoint /gqreq /gshow /gsize /gstop /gtalk /gunload /hadd /hdec /hdel /hfree /hinc /hload /hmake /hsave  /break /continue /else /elseif /goto /halt /haltdef /if /return /returnex /while /dec /inc /set /var /unset /unsetall /auser /dlevel /guser /iuser /rlevel /ulist /flush /ruser /ial /ialclear /ialmark /ialfill /copy /flushini /mkdir /remini /remove /rename /write /writeini /rmdir /aop /avoice /ban /channel /ignore /leave /mode /parseline /pop /protect /pvoice /say /updatenl /abook /ajinvite /alias /anick /autojoin /background /beep /bindip /clipboard /cnick /color /colour /creq /ctcpreply /ctcps /dccserver /dde /ddeserver /debug /disable /dll /dns /dqwindow /ebeeps /exit /echo /editbox /emailaddr /enable /events /filter /findtext /finger /firewall /flash /flood /fnord /font /fsend /fserve /fullname /fupdate /groups /hotlink /identd /linesep /load /loadbuf /localinfo /log /logview /mdi /menubar /mnick /noop /notify /pdcc /perform /play /playctrl /proxy /queryrn /registration /reload /remote /renwin /reseterror /resetidle /run /save /savebuf /saveini /scid /scon /setlayer /showmirc /signal /speak /splay /sreq /strip /switchbar /timer /timestamp /tip /tips /titlebar /tnick /tokenize /toolbar /tray /treebar /unload /url /vcadd /vcmd /vcrem /vol /xyzzy /auto /away /clearial /close /closemsg /timers /timeapi /username",
          "begin": "(?i)(?:\\x20+\\|\\x20+|else\\x20|^\\x20*|\\)|\\G)\\x20*(\\/+)?([!|.]{1,2})?((?:win)?help|server|disconnect|join|hop|part|part(?:all)?|quit|list|links|raw|(?:a|q)?me|(?:a|q|o|v|priv)?msg|(?:o|v)?notice|describe|query|sound|ctcp|dcc|wall(?:chops|voices)|uwho|sock(?:accept|close|list|listen|mark|open|pause|read|rename|udp|write)|b(?:read|replace|copy|set|trunc|unset|write)|com(?:close|list|open|reg)|dialog|did(?:tok)?|draw(?:copy|dot|fill|line|pic|rect|replace|rot|save|scroll|size|text)|f(?:open|list|seek|write|close)|(?:a|c|d|i|r|s)line|clear(?:all|ial)?|window|g(?:hide|(?:un)?load|move|opts|play|point|qreq|show|size|stop|talk)|h(?:add|dec|del|free|inc|load|make|save)|break|continue|goto|halt(?:def)?|return(?:ex)?|dec|inc|set|var|unset(?:all)|dec|inc|set|var|unset(?:all)?|(?:a|g|i|r)user|(?:d|r)level|ulist|flush|ial(?:clear|mark|fill)?|copy|flushini|(?:mk|rm)dir|rem(?:ini|ove)|rename|write(?:ini)?|aop|avoice|ban|channel|ignore|leave|mode|parseline|pop|protect|pvoice|say|updatenl|abook|ajinvite|alias|(?:a|c|m|t)nick|auto(?:join)?|background|beep|bindip|clipboard|colou?r|creq|ctcp(?:reply|s)|dccserver|dde(?:server)?|debug|disable|dll|dns|dqwindow|ebeeps|exit|echo|editbox|emailaddr|enable|events|filter|findtext|finger|firewall|flash|flood|fnord|font|fsend|fserve|fullname|fupdate|groups|hotlink|identd|linesep|load(?:buf)?|localinfo|log(?:view)?|mdi|menubar|noop|notify|pdcc|perform|play(?:ctrl)?|proxy|queryrn|registration|reload|remote|renwin|reset(?:error|idle)|run|save(?:buf|ini)?|scid|scon|setlayer|showmirc|signal|speak|splay|sreq|strip|switchbar|time(?:stamp|api|rs|r([^\\s]+)?)|tips?|titlebar|tokenize|toolbar|tray|treebar|unload|url|vc(?:add|md|rem)|vol|xyzzy|away|close(?:msg)?|username)(?=\\b)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.command.symbol.msl"
            },
            "2": {
              "name": "keyword.other.command.symbol.msl"
            },
            "3": {
              "name": "keyword.control.command.msl"
            },
            "4": {
              "name": "support.variable.name.msl"
            }
          },
          "end": "(?=\\z|\\x20+\\|\\x20+[^\\s]|\\x20}|$)",
          "patterns": [
            {
              "include": "#switches"
            },
            {
              "include": "#parameters"
            }
          ]
        },
        {
          "comment": "Matches possible custom commands.",
          "name": "meta.cmd.msl",
          "begin": "(?i)(?:\\|\\x20+|else\\x20|^\\x20*|\\)|\\G)\\x20*(\\/+)?([!|.]{1,2})?((?![{};%&$])[^\\s]+)",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.command.symbol.msl"
            },
            "2": {
              "name": "keyword.other.command.symbol.msl"
            },
            "3": {
              "name": "support.function.name.msl"
            }
          },
          "end": "(?=\\z|\\x20+\\|\\x20+[^\\s]|\\x20}|$)",
          "patterns": [
            {
              "include": "#switches"
            },
            {
              "include": "#parameters"
            }
          ]
        }
      ]
    },
    "switches": {
      "patterns": [
        {
          "comment": "Matches - or + switches",
          "name": "keyword.other.switch.msl",
          "match": "(?<=\\x20)[-+][[:alnum:]]+(?=\\s)"
        }
      ]
    },
    "menu": {
      "patterns": [
        {
          "comment": "Matches menu declaration.",
          "name": "meta.menu.code.msl",
          "begin": "(?i)^(menu)\\x20+((?:status|channel|query|nicklist|menubar|@[^\\x20,]+)(?:,(?:status|channel|query|nicklist|menubar|@[^\\x20,]+))*)(?=\\x20+{)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.menu.msl"
            },
            "2": {
              "name": "storage.modifier.function.msl"
            }
          },
          "end": "(?i)(?=\\z|(?:^(?:on|raw|ctcp|dialog|\\#[^\\s]+|alias|menu)\\b))|(?<=}$)",
          "patterns": [
            {
              "include": "#menu_content"
            }
          ]
        }
      ]
    },
    "menu_content": {
      "patterns": [
        {
          "include": "#parameters"
        },
        {
          "comment": "Matches menu items",
          "begin": "(?:^\\x20*|\\G)\\x20*(?:\\.+)?(?:([^:]+)(?:\\x20*:\\x20*)|\\-)",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.other.title.msl"
            }
          },
          "end": "(?=\\z|\\x20}|$)",
          "patterns": [
            {
              "include": "#code_content"
            }
          ]
        }
      ]
    }
  }
}