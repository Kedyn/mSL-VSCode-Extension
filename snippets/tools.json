{
  "Alias Command": {
    "prefix": "alias:command",
    "body": [
      "/**",
      "*",
      "* ${2:Description...}",
      "*",
      "* @command /${1:myCommand}",
      "*",
      "* @switch ${3:a}  ${4:description...}",
      "*",
      "* @param <${5:somParam}>  ${6:description...}",
      "*",
      "* ${7:@global}",
      "*",
      "*/",
      "alias ${8:-l} ${1:myCommand} {",
      "  if (!\\$isid) {",
      "    $0",
      "  }",
      "  else {",
      "    echo -ces info * ${1:myCommand}: is not an identifier",
      "",
      "    halt",
      "  }",
      "}"
    ],
    "description": "Alias command template."
  },
  "Alias Identifier": {
    "prefix": "alias:identifier",
    "body": [
      "/**",
      "*",
      "* ${2:Description...}",
      "*",
      "* @identifier \\$${1:myIdentifier}",
      "*",
      "* @param <${3:somParam}>  ${4:description...}",
      "*",
      "* @prop ${5:name}  ${6:description...}",
      "*",
      "* @returns  ${7:description...}",
      "*",
      "* ${8:@global}",
      "*",
      "*/",
      "alias ${9:-l} ${1:myIdentifier} {",
      "  if (\\$isid) {",
      "    return $0",
      "  }",
      "  else {",
      "    echo -ces info * ${1:myIdentifier}: is not a command",
      "",
      "    halt",
      "  }",
      "}"
    ],
    "description": "Alias identifier template."
  },
  "Alias Command and Identifier": {
    "prefix": "alias:commandandidentifier",
    "body": [
      "/**",
      "*",
      "* ${2:Command description...}",
      "*",
      "* @command /${1:myCommand}",
      "*",
      "* @switch ${3:a}  ${4:description...}",
      "*",
      "* @param <${5:somParam}>  ${6:description...}",
      "*",
      "* ${13:@global}",
      "*/",
      "/**",
      "*",
      "* ${7:Identifier description...}",
      "*",
      "* @identifier \\$${1:myIdentifier}",
      "*",
      "* @param <${8:somParam}>  ${9:description...}",
      "*",
      "* @prop ${10:name}  ${11:description...}",
      "*",
      "* @returns  ${12:description...}",
      "*",
      "* ${13:@global}",
      "*",
      "*/",
      "alias ${14:-l} ${1:myAlias} {",
      "  if (!\\$isid) {",
      "    ; command",
      "    $0",
      "  }",
      "  else {",
      "    ; identifier",
      "    ",
      "  }",
      "}"
    ],
    "description": "Alias command and identifier template."
  },
  "Alias Constant": {
    "prefix": "alias:constant",
    "body": [
      "/**",
      "*",
      "* ${2:Description...}",
      "*",
      "* @const \\$${1:myConstant}",
      "*",
      "* ${3:@global}",
      "*",
      "*/",
      "alias ${4:-l} ${1:myConstant} return $0"
    ],
    "description": "Alias constant template."
  },
  "Event": {
    "prefix": "onevent",
    "body": [
      "/**",
      "*",
      "* ${2:Description...}",
      "*",
      "* @event ${1:event}",
      "*",
      "*/",
      "on *:${1:event}: {",
      "  $0",
      "}"
    ],
    "description": "Event template."
  },
  "GetParameters": {
    "prefix": "getParameters",
    "body": [
      "/**",
      "*",
      "* Tokenizes a string based on a delimiter or quotes just as mIRC does for native commands.",
      "*",
      "* @identifier \\$getParameters",
      "*",
      "* @param <parameters>       String containing your parameters",
      "* @param [delimiter=\\\\x20]   The delimiter for your parameters",
      "*",
      "* @returns  String tokenized into \\$cr based on a specified delimiter or double quotes.",
      "*",
      "*/",
      "alias -l getParameters {",
      "  if (\\$isid) {",
      "    if (\\$1 != \\$null) {",
      "      set -l %tokenized \\$null",
      "      set -l %token 1",
      "      set -l %chr \\$2",
      "",
      "      if (%chr == \\$null) set -l %chr \\\\x20",
      "",
      "      set -l %regex /((?:\"(?:[^\"])*\"|[^ \\$+ %chr \\$+ ])+)/g",
      "",
      "      set -l %tokens \\$regex(tokens,\\$1,%regex)",
      "      set -l %total \\$regml(tokens,0)",
      "",
      "      while (%token <= %total) {",
      "        set -l %tokenized \\$+(%tokenized,\\$cr,\\$regml(tokens,%token))",
      "",
      "        inc %token",
      "      }",
      "",
      "      return %tokenized",
      "    }",
      "    else {",
      "      echo -ces info * \\$!getParameters: insuficient parameters",
      "",
      "      halt",
      "    }",
      "  }",
      "  else {",
      "    echo -ces info * getParameters: is not a command",
      "",
      "    halt",
      "  }",
      "}"
    ],
    "description": "Alias that tokenizes a string based on a delimiter or quotes just as mIRC does for native commands."
  }
}